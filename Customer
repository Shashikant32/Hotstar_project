// <!-- Refactor Customer Class for Spring Boot Context In a real Spring Boot application, your entities such as Customer, WebSeries, and Match would typically be annotated with JPA annotations (e.g., @Entity) for persistence.Here's a refactor to make Customer compatible with JPA: -->

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToOne;

@Entity
public class Customer {

    @Id
    private String name;

    @OneToOne
    private Subscription subscription;  // Assuming subscription is a separate entity

    // Constructors, Getters, and Setters
    public Customer(String name, Subscription subscription) {
        this.name = name;
        this.subscription = subscription;
    }

    public String getName() {
        return name;
    }

    public Subscription getSubscription() {
        return subscription;
    }

    public void setSubscription(Subscription subscription) {
        this.subscription = subscription;
    }

    public void printAvailableContent(List<WebSeries> webSeriesList, List<Match> matchList) {
        System.out.println(name + "'s Available Content:");

        System.out.println("Web Series:");
        for (WebSeries webSeries : webSeriesList) {
            if (subscription.canWatchWebSeries(webSeries)) {
                System.out.println("- " + webSeries.getTitle());
            }
        }

        if (subscription.canWatchMatch()) {
            System.out.println("Matches:");
            for (Match match : matchList) {
                System.out.println("- Match between " + match.getTeam1() + " and " + match.getTeam2());
            }
        } else {
            System.out.println("You need an ELITE subscription to watch matches.");
        }
    }

    public double getSubscriptionCost() {
        return subscription.calculateCost();
    }
}
